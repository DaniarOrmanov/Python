# 3. Реализовать программу работы с органическими клетками.
# Необходимо создать класс Клетка. В его конструкторе инициализировать
# параметр, соответствующий количеству клеток (целое число). В классе
# должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__truediv__()).Данные методы должны применяться только к клеткам
# и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное)
# деление клеток, соответственно. В методе деления должно осуществляться
# округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно
# равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если
# разность количества ячеек двух клеток больше нуля, иначе выводить
# соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки
# определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки
# определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр
# класса и количество ячеек в ряду. Данный метод позволяет организовать
# ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество
# ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда
# не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.

import math

class Cell:

    def __init__(self, quantity):
        try:
            num = float(quantity)
        except ValueError:
            if quantity == 'нельзя!':
                self.quantity = 'Количество ячеек первой клетки должно превышать количество ячеек второй!'
            else:
                self.quantity = 'В качестве параметров должны быть натуральные числа!'
            print(self.quantity)
            quit()
        else:
            if num > 0 and num == int(quantity):
                self.quantity = quantity
            else:
                self.quantity = 'В качестве параметров должны быть натуральные числа!'
                print(self.quantity)
                quit()

    def __add__(self, other):
        return Cell(self.quantity + other.quantity)

    def __sub__(self, other):
        if self.quantity > other.quantity:
            return Cell(self.quantity - other.quantity)
        else:
            return Cell('нельзя!')

    def __mul__(self, other):
        return Cell(self.quantity * other.quantity)

    def __truediv__(self, other):
        if self.quantity > other.quantity:
            return Cell(self.quantity // other.quantity)
        else:
            return Cell('нельзя!')

    def make_order(self, class_cell, number_in_row):
        self.class_cell = class_cell
        self.number_in_row = number_in_row

        i = 1
        str = ''
        while i < self.class_cell.quantity + 1:
            if i % self.number_in_row == 0:
                str = str + '*\n'
            else:
                str = str + '*'
            i += 1
        return str


number = 5                               # количество ячеек в ряду
cell1 = Cell(13)
cell2 = Cell(3)
print(f'Количество ячеек в новой клетке после сложения: {(cell1 + cell2).quantity}.')
print(f'Количество ячеек в новой клетке после вычетания: {(cell1 - cell2).quantity}.')
print(f'Количество ячеек в новой клетке после умножения: {(cell1 * cell2).quantity}.')
print(f'Количество ячеек в новой клетке после деления: {(cell1 / cell2).quantity}.')
print(f'Структура клетки по рядам:\n{cell1.make_order(cell1, number)}.')
